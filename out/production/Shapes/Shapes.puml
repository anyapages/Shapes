@startuml

' Package for entity classes
package entities {
    ' Canvas class represents the drawing area
    class Canvas {
        - width : int
        - height : int
        - backgroundCharacter : char
        - shapes : List<Shape>
        + getWidth() : int
        + getHeight() : int
        + getBackgroundChar() : String
        + getCanvasArray() : char[][]
        + addShape(shape : Shape) : void
        + display(canvasArray : char[][]) : void
        + clearCanvas() : void
        + render() : char[][]
    }

    ' FileUtility class handles file operations
    class FileUtility {
        + saveCanvasToFile(canvas : Canvas, filePath : String) : void
        + readFile(file : String) : String
    }

    ' Abstract Shape class for common shape properties and methods
    abstract class Shape {
        - x : int
        - y : int
        - printingChar : char
        - color : Color
        - zoomedOrMoved : boolean
        {abstract} + draw(canvas : char[][]) : void
        {abstract} + getArea() : double
        {abstract} + getSide1() : String
        {abstract} + getSide2() : String
        {abstract} + getColor() : String
        + setZoomedOrMoved(zoomedOrMoved : boolean) : void
    }

    ' Triangle, Rectangle, Square classes
    class Triangle extends Shape implements Transformable {
        - side : int
        + Triangle(x : int, y : int, side : int, printingChar : char, color : Color)
    }
    class Rectangle extends Shape implements Transformable {
        - length : int
        - breadth : int
        + Rectangle(x : int, y : int, length : int, breadth : int, printingChar : char, color : Color)
    }
    class Square extends Shape implements Transformable {
        - side : int
        + Square(x : int, y : int, side : int, printingChar : char, color : Color)
    }

    ' Enum for color
    enum Color {
        RED
        BLUE
        BLACK
    }

    ' Interfaces for movement and zoom
    interface Movable {
        + moveUp() : void
        + moveDown() : void
        + moveLeft() : void
        + moveRight() : void
    }
    interface Zoomable {
        + zoomIn() : void
        + zoomOut() : void
    }
    interface Transformable extends Movable, Zoomable {
    }
}

' Package for custom exceptions
package exceptions {
    ' Exception for illegal size operations
    class IllegalSizeException {
        + IllegalSizeException(message: String)
    }

    ' Exception for invalid file format or content
    class InvalidFileException {
        + InvalidFileException(message: String)
    }

    ' Exception for invalid shape location
    class InvalidLocationException {
        + InvalidLocationException(message: String)
    }
}

' Main application class
class ShapesApplication {
    - canvas : Canvas
    - commandLineArgs : String[]
    + main(args : String[]) : void
    + run(args : String[]) : void
    + loadFile(filePath : String) : void
    + displayCanvasDetails() : void
    + displayMainMenu() : void
    + processUserInput() : void
    + compareResults() : void
    + exitApplication() : void
}

' Relationships between classes
ShapesApplication --> entities.Canvas
entities.Canvas --> entities.Shape
entities.Shape <|-- entities.Triangle
entities.Shape <|-- entities.Rectangle
entities.Shape <|-- entities.Square
entities.Triangle -up-|> entities.Transformable
entities.Rectangle -up-|> entities.Transformable
entities.Square -up-|> entities.Transformable
entities.Shape -right-|> entities.Color
entities.FileUtility <.. ShapesApplication
exceptions.IllegalSizeException <.. entities.Shape
exceptions.InvalidFileException <.. ShapesApplication
exceptions.InvalidLocationException <.. entities.Shape

' Notes for additional context
note bottom of ShapesApplication
  ShapesApplication is the main
  class that handles user input
  and displays the canvas.
end note

note top of entities.Canvas
  Canvas manages shapes and
  provides methods to manipulate
  and display them.
end note

note top of exceptions.IllegalSizeException
  Thrown when a shape's size
  operation is not valid.
end note

@enduml
